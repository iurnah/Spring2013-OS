/* 
A Senible File System.
1. no limit to the size of a file (except imposed by the size of the disc)
2. Free blocks must be properly managed so deleted file for re-use.
3. Access to the data in a file must be efficient.
4. Do not use contiguous allocation.
5. Once a file has been created, ok to add data to it at any time, without limit.
6. Directories are just like any other file, but with a special data format.
7. Files have tags in their metadata now at least whether they are directories
   or regular data files.

Required operations, provided as a library of functions:
   1. Create a file
   2. Open an existing file
   3. Delete a file
   4. Create a directory
   5. Write N bytes to a file
   6. Read N bytes from a file
   7. Set file position (so, for example, the next write will be
                      appended to the end).
*/
//todo 1: inode index fix because root inode added
//todo 2: change dir back to previous directory
//todo 3: make file in other directory
//todo 4: write bigger file more than 9 blocks
//todo 5: read from it
//todo 6: set file position
//todo 7: read n bytes from file
//todo 8: write n bytes from file
import "io"

manifest	//some parameters
{ words_per_block = 128 }

manifest	//superblock
{ sb_discname = 0,	
    sb_discnamesize = 32,
  sb_rootstart = 8,
  sb_rootsize = 9,
  sb_inodestart = 10,  
  sb_inodesize = 11, 
  sb_firstfree = 12, 
  sb_updated = 13 //update time for the superblock
  //may add more info later
}

manifest	//root directory entry
{ rde_name = 0,
  rde_namesize = 27, //pick 27 to make each block fit 16 entry
  rde_status = byte 27,
	rde_free = 0,
	rde_exists = 1,
  rde_inodenum = 7,
  sizeof_rde = 8 }		//might need to change to 6 also

manifest	//directory entry, same as the root direcotry entry
{ de_name = 0,
  de_namesize = 27,
  de_status = byte 27,
    de_free = 0,
    de_exists = 1,
  de_inodenum = 7,
  sizeof_de = 8 }

manifest	//inode structure entry 
			//indexing inode table caculated based on the # entry
{ inode_type = byte 0,		//dir or file?
    inode_file = 0,
    inode_dir = 1,
  inode_status = byte 1,	//status byte for reuse of the entry
    inode_free = 0,
    inode_exists = 1,
  inode_size = 1,			//file size
  inode_nblock = 2,			//num of blocks allocated for this file
  inode_time = 3,			//last accessed?
    inode_month = byte 12,
	inode_day = byte 13,
	inode_hour = byte 14,
	inode_min = byte 15,
  inode_ctime = 4,			//create time
    inode_month_c = byte 16,
	inode_day_c = byte 17,
	inode_hour_c = byte 18,
	inode_min_c = byte 19,
  inode_firstblockptrs = 5, //first block pointer, +i to index others
  inode_blocksptrsize = 9,  //total number
  inode_firstlevelptr = 14,
  inode_secondlevelptr = 15,
  sizeof_inode = 16
  //may add more info later
}

manifest	//in-mem fs structure
{ fs_discnum = 0,	//which disc drive
  fs_nblocks = 1,	//total number of blocks
  fs_rootstart = 2,
  fs_rootsize = 3,
  fs_firstfree = 4,
  fs_rootdir = 5,	//pinter to in-memory copy
  fs_inodestart = 6, 
  fs_inodesize = 7,	//inode table block size
  fs_inodetable = 8,//pinter to in-memory copy as fs_rootdir
  fs_discname = 9,	//pointer to a string
  fs_sbupdated = 10,//when last written to disc
  fs_currentdir = 11,//ptr to the current directory
  sizeof_fs = 12 }

manifest	//file information
{ fi_status = 0,
  fi_number = 1,
  fi_firstblock = 2,
  fi_length = 3,
  sizeof_fi = 4 }

manifest	//file = open file, information used by higher level function
			// open, read, write, close. Includes buffer space
{ file_mode = 0,		//R and W mode
  file_filesys = 1,		//ptr to the in-mem fs structure
  file_thisblockn = 2,	//first block of the file
  file_remaining = 3,	//size of the file
  file_position = 4,	//new open position=0 
  file_buffer = 5,		//keep the file buffer address
  sizeof_file = 6 + 128 }

/* error messages */
let last_error = nil,
    err_dscfull = "not enough disc space",
    err_dirfull = "directory is full",
    err_notfound = "file not found",
    err_wrongmode = "incorrect mode";

/* string input function */
let ins(ptr, sz) be
{ let max = sz*4-1,
      len = 0;
  while true do
  { let c = inch();
    if c = '\n' then break;
    if len < max then
    { byte len of ptr := c;
      len +:= 1 } }
  byte len of ptr := 0;
  resultis ptr }

/* copy of a string, but in heap memory */
let strdup(s) be
{ let len = strlen(s)/4 + 1;
  let r = newvec(len);
  for i = 0 to len-1 do
    r ! i := s ! i;
  resultis r }

/* are two strings equal? */
let streq(a, b) be           
{ let i = 0;
  while true do
  { let ca = byte i of a, cb = byte i of b;
    if ca <> cb then resultis false;
    if ca = 0 then resultis true;
    i +:= 1 } }

/* copy a string from zero terminated to non-zero terminated string*/
let zstr_to_nzstr(src, dst, size) be
{ let len = 0;
  while len<size do
  { let c = byte len of src;
    if c = 0 then break;
    byte len of dst := c;
    len +:= 1 }
  while len<size do
  { byte len of dst := 0;
    len +:= 1 } }

/* copy a string from non-zero terminated to zero terminated string*/
let nzstr_to_zstr(src, dst, size) be
{ let len = 0;
  while len<size do
  { let c = byte len of src;
    if c = 0 then break;
    byte len of dst := c;
    len +:= 1 }
  byte len of dst := 0 }

/*write super block from mem to disc */
let write_superblock(fs) be
{ let b = vec 128, r;
  for i = 0 to 127 do
    b ! i := 0;
  zstr_to_nzstr(fs ! fs_discname, b + sb_discname, sb_discnamesize);
  b ! sb_rootstart := fs ! fs_rootstart;
  b ! sb_rootsize := fs ! fs_rootsize;
  b ! sb_firstfree := fs ! fs_firstfree;
  b ! sb_inodestart := fs ! fs_inodestart;
  b ! sb_inodesize := fs ! fs_inodesize;
  fs ! fs_sbupdated := seconds();
  b ! sb_updated := fs ! fs_sbupdated;
  r := devctl(dc_disc_write, fs ! fs_discnum, 0, 1, b);
  if r < 0 then out("write_superblock dc_disc_write error %d\n", r);
  resultis r }

/*write rood directory entry to disc */
let write_rootdir(fs) be
{ let r = devctl(dc_disc_write, fs ! fs_discnum, fs ! fs_rootstart,
                 fs ! fs_rootsize, fs ! fs_rootdir);
  if r < 0 then out ("write_rootdir dc_disc_write error %d\n", r);
  resultis r }

/*write inode table from mem to disk */
let write_inodetable(fs) be
{ let r = devctl(dc_disc_write, fs ! fs_discnum, fs ! fs_inodestart,
				 fs ! fs_inodesize, fs ! fs_inodetable);
  if r < 0 then 
  out("write_inodetable dc_disc_write error %d\n", r);
  resultis r }

/*read super block from disc to mem */
let read_superblock(fs) be
{ let b = 128, r;
  r := devctl(dc_disc_read, fs ! fs_discnum, 0, 1, b);
  if r < 0 then
  { out(" read_superblock dc_disc_read error %d\n", r);
    resultis r}
  fs ! fs_discname := newvec(sb_discnamesize/4+1);
  nzstr_to_zstr(b + sb_discname, fs ! fs_discname, sb_discnamesize);
  fs ! fs_rootstart := b ! sb_rootstart; 
  fs ! fs_rootsize := b ! sb_rootsize; 
  fs ! fs_inodestart := b ! sb_inodestart;
  fs ! fs_inodesize := b ! sb_inodesize; 
  fs ! fs_firstfree := b ! sb_firstfree;
  resultis r }

/*read root directory entry from disc to mem*/
let read_rootdir(fs) be
{ let rd = newvec(fs ! fs_rootsize * 128),
      r = devctl(dc_disc_read, fs ! fs_discnum, fs ! fs_rootstart,
                 fs ! fs_rootsize, rd);
  if r < 0 then 
  { out("read_rootdir dc_disc_read error %d\n", r);
    freevec(rd) }
  fs ! fs_rootdir := rd;
  resultis r }

/*read inode table from disk to mem */
let read_inodetable(fs) be
{ let itable = newvec(fs ! fs_inodesize * 128),
      i = devctl(dc_disc_read, fs ! fs_discnum, fs ! fs_inodestart,
				 fs ! fs_inodesize, itable); 
  if i < 0 then
  { out("read_inodetable dc_disc_read error %d\n", i);
	freevec(itable) }
  fs ! fs_inodetable := itable;
  resultis i }

/* write datablocks with all zeros */
let format_datablocks(fs) be
{ let b = vec words_per_block, x;
  for i = 0 to 127 do b ! i := 0;
  out("fs_firstfree = %d\n", fs ! fs_firstfree);
  for i = fs ! fs_firstfree to fs ! fs_nblocks - 1 do
	x := devctl(dc_disc_write, fs ! fs_discnum, i, 1, b);
  if x = 1 then
	out("disc %d formated!!!\n", fs ! fs_discnum) }

/* format disk */
let format(fs) be 
{ let d, r, n, tempstr = vec sb_discnamesize/4+1;
  let b = vec words_per_block, x;
  let rootdirname = vec rde_namesize/4 + 2;
  let rootparent_status, rootparent_type;
  while true do
  { outs("which disc unit? ");
    d := inno();
	r := devctl(dc_disc_check, d);
	if r > 0 then break;
	out("error %d\n", r) }

  out("disc unit %d, %d blocks\n", d, r);
  fs ! fs_discnum := d;
  fs ! fs_nblocks := r;
  out("disc label (max 32 chars)? "); //ask for disc lable input
  fs ! fs_discname := strdup(ins(tempstr, sb_discnamesize/4+1)); //see ins()
  outs("size (in blocks) of root directory? ");
  r := inno();
  fs ! fs_rootstart := 1; //root start right after block 0 (superblock)
  fs ! fs_rootsize := r;
  outs("size (in blocks) of inode table ? "); //define inode table
  n := inno();
  fs ! fs_inodestart := 1+r; //inode table start after rood dir 
  fs ! fs_inodesize := n;
  fs ! fs_firstfree := 1+r+n; //free data block start after roor dir and inode
  outs("root dir name? ");
  ins(rootdirname, rde_namesize);
  d := newvec(r * 128);
  for i = 0 to r*128-1 do //start with the third entry
    d ! i := 0;
  zstr_to_nzstr(rootdirname, d + rde_name, rde_namesize); 
  rde_status of d := rde_exists;//mark first entry as used
  d ! rde_inodenum := 0;			//hard coded inode number for root 
  //format the second entry of the root directory
  zstr_to_nzstr("..", d + sizeof_rde + rde_name, rde_namesize);
  d +:= sizeof_rde;		//temperory go to second entry
  rde_status of d := rde_exists;//for consistancy with directory
  d ! rde_inodenum := 1;//inode of the second entry (useless)
  d -:= sizeof_rde;		//go back to the beginning
  fs ! fs_rootdir := d;	//hold in-mem address of root directory

  d := newvec(n * 128);
  for i = 0 to n*128-1 do
    d ! i := 0;
  //initial first inode for root dir
  inode_type of d := inode_dir;
  inode_status of d := inode_exists;
  d ! inode_size := 0;
  d ! inode_nblock := 25;	//9+firstlevel(16)
  d ! inode_time := 0;
  d ! inode_ctime := 0;
  d ! inode_firstblockptrs := 200;//todo: dynamically allocate root dir size
  rootparent_type := sizeof_inode * 4;//pay attention to this indexing thing
  rootparent_status := sizeof_inode * 4 + 1;//pay attention to this 
  byte rootparent_type of d := inode_dir;// the parent dir of root(no)
  byte rootparent_status of d := inode_exists; 
  fs ! fs_inodetable := d; //hold in-mem address of inode table

  d := write_superblock(fs);
  unless d<0 do d := write_rootdir(fs);
  unless d<0 do d := write_inodetable(fs);
  //unless d<0 do d := format_datablocks(fs);
  if d<0 then
  { freevec(fs ! fs_discname); // newvec is allocated in strdup()
    freevec(fs ! fs_rootdir);
    freevec(fs ! fs_inodetable);
    fs ! fs_discnum := 0 } 
  for i = 0 to 127 do b ! i := 0;
  //out("fs_firstfree = %d\n", fs ! fs_firstfree);
  for i = fs ! fs_firstfree to fs ! fs_nblocks - 1 do
	x := devctl(dc_disc_write, fs ! fs_discnum, i, 1, b);
  if x = 1 then
	out("disc %d formated!!!\n", fs ! fs_discnum);
  out("root direcotry name = %s\n", rootdirname) }
 
/*load a exsit disc */
let load(fs) be
        // get an already formatted disc ready for use.
        // the user of this function is responsible for providing an empty
        //    fs object to hold the information generated.
{ let d, r, sb = vec 128;
  while true do
  { outs("which disc unit? ");
    d := inno();
    r := devctl(dc_disc_check, d);
    if r > 2 then break; // disc ready -> break
    out("error %d\n", r) }
  fs ! fs_discnum := d;
  fs ! fs_nblocks := r;
  out("disc unit %d, %d blocks\n", d, r);
  r := read_superblock(fs); //read super block to mem
  if r<0 then
  { fs ! fs_discnum := 0;
    return }
  out("disc label '%s'\n", fs ! fs_discname);
  out("root directory blocks %d to %d\n", fs ! fs_rootstart, 
       fs ! fs_rootstart + fs ! fs_rootsize - 1);
  out("inode table blocks %d to %d\n", fs ! fs_inodestart,
       fs ! fs_inodestart + fs ! fs_inodesize -1); 
  out("first free block: %d\n", fs ! fs_firstfree);
  r := read_rootdir(fs);	//read root directory
  unless r < 0 do r := read_inodetable(fs);	//read inode table 
  if r<0 then
  { freevec(fs ! fs_discname); //free the allocated heap
    fs ! fs_discnum := 0 } }

/* list the root directory */
let listroot(fs) be
{ let entry = fs ! fs_rootdir,
	  nentries = fs ! fs_rootsize * 128 / sizeof_rde,
      fname = vec rde_namesize/4+2, //+2 because 23/4
	  inodenum, inodentry,
      count = -2;
  //get inode table
  let inodetable = fs ! fs_inodetable;
   
  for i = 0 to nentries-1 do
  { if rde_status of entry <> rde_free then
    { nzstr_to_zstr(entry + rde_name, fname, rde_namesize);
      //need to access to inode table
      inodenum := entry ! rde_inodenum; 
	  inodentry := inodetable + inodenum * sizeof_inode; 
      //i | type | filesize | numblocks | time | ctime | name
	  out("%2d %2d %10d %5d %5d %5d %32s\n", i, inode_type of inodentry, 
           inodentry ! inode_size, inodentry ! inode_nblock,
		   inodentry ! inode_time, inodentry ! inode_ctime, fname); 
      count +:= 1 }
    entry +:= sizeof_rde }
   out("%d files\n", count) }

/* create a blank file */
let makefile_hide(fs, fname, length, info) be
{ let entry = fs ! fs_rootdir,
      nentries = fs ! fs_rootsize * 128 / sizeof_rde;
  //get inode table
  let inodetable = fs ! fs_inodetable,
      numinodentry = fs ! fs_inodesize * 128 / sizeof_inode,
      inodenum, inodentry;
  let t, v;	//for time functions
  //t := seconds();
  //datetime(t, v);
  for i = 0 to nentries-1 do	//for each entry in the rootdir
  { if rde_status of entry = 0 then	//find the available entry
    { let nblocks = (length + 511) / 512;	//calculate the block
      if fs ! fs_firstfree + nblocks > fs ! fs_nblocks then
      { last_error := err_dscfull;
        resultis nil }
      zstr_to_nzstr(fname, entry + rde_name, rde_namesize); //1. rde name
	  // update root directory entry todo:take care of making the directory
	  rde_status of entry := rde_exists; //2. rde status byte
      for i = 0 to numinodentry-1 do
	  { if inode_status of inodetable = 0 then
        { inodenum := i;	//find the first available inode table entry
		  inode_type of inodetable := inode_file; //0 is file, 1 is dir 
		  inode_status of inodetable := inode_exists;
		  inodetable ! inode_size := length; 
		  inodetable ! inode_nblock := nblocks; 
		  inodetable ! inode_time := 0; //todo: manipulate time functions
/*		  inode_month of inodetable := v ! 1;
		  inode_day of inodetable := v ! 2;
		  inode_hour of inodetable := v ! 4;
		  inode_min of inodetable := v ! 5; */
		  inodetable ! inode_ctime := 0;// 
		  for j = 0 to nblocks-1 do		//assign free block for this file
		    { inodetable ! (inode_firstblockptrs + j) := fs ! fs_firstfree;
			  fs ! fs_firstfree +:= 1 }
		  //todo: if nblock > 8, take care the first level and second level  
		  break } 
	    inodetable +:= sizeof_inode }
      entry ! rde_inodenum := inodenum; //3. rde inode number 
	  info ! fi_status := rde_exists;
	  info ! fi_number := inodenum;
	  info ! fi_firstblock := inodetable ! inode_firstblockptrs;
      info ! fi_length := length;
	  resultis info }
    entry +:= sizeof_rde }
  last_error := err_dirfull;
  info ! fi_status := rde_free;
  resultis nil }

/* create a blank file that need more than 9 blocks
   duplication function for debuging */
let makefile(fs, fname, length, info) be
{ let entry = fs ! fs_rootdir,
      nentries = fs ! fs_rootsize * 128 / sizeof_rde;
  //get inode table
  let inodetable = fs ! fs_inodetable,
      numinodentry = fs ! fs_inodesize * 128 / sizeof_inode,
      inodenum, inodentry;
  let t, v;	//for time functions
  let b = newvec(words_per_block), x; //for read a single block from disc
  let b1 = newvec(words_per_block);
  let b2 = newvec(words_per_block);
  let num_second_index_blocks;

  //t := seconds();
  //datetime(t, v);
  for i = 0 to nentries-1 do	//for each entry in the rootdir
  { if rde_status of entry = 0 then	//find the available entry
    { let nblocks = (length + 511) / 512;	//calculate the block
      if fs ! fs_firstfree + nblocks > fs ! fs_nblocks then
      { last_error := err_dscfull;
        resultis nil }
      zstr_to_nzstr(fname, entry + rde_name, rde_namesize); //1. rde name
	  // update root directory entry todo:take care of making the directory
	  rde_status of entry := rde_exists; //2. rde status byte
      for i = 0 to numinodentry-1 do
	  { if inode_status of inodetable = 0 then
        { test nblocks <= inode_blocksptrsize then
		  { out("file size only need less than 9 blocks\n");
            for j = 0 to nblocks-1 do		//assign free block < 9
		    { inodetable ! (inode_firstblockptrs + j) := fs ! fs_firstfree;
			  fs ! fs_firstfree +:= 1 } }
		  else test nblocks <= inode_blocksptrsize + words_per_block then
		  { out("file size need one level index!!\n");
			for j = 0 to 8 do		//assign free block < 9
		    { inodetable ! (inode_firstblockptrs + j) := fs ! fs_firstfree;
			  fs ! fs_firstfree +:= 1 } 
			inodetable ! inode_firstlevelptr := fs ! fs_firstfree;//indexbloc
			fs ! fs_firstfree +:= 1;	// the freeblock is incresed by 1
			//prepare an index block
			for i = 0 to nblocks - inode_blocksptrsize - 1 do
			{ b ! i := fs ! fs_firstfree; 
			  fs ! fs_firstfree +:= 1 }
			x := devctl(dc_disc_write, fs ! fs_discnum,
						inodetable ! inode_firstlevelptr, 1, b);
			//todo: whether or when need to release this newvec b? 
			if x <> 1 do
			  out("write fisrtlevelptr failed!!! x = %d", x) }
		  else test nblocks <= 5995 then
		  { out("file size need two level index!!\n");
			for j = 0 to 8 do
			{ inodetable ! (inode_firstblockptrs + j) := fs ! fs_firstfree;
			  fs ! fs_firstfree +:= 1 } 
			//todo: should make use of the first level also
			inodetable ! inode_firstlevelptr := fs ! fs_firstfree;//indexbloc
			fs ! fs_firstfree +:= 1;	// the freeblock is incresed by 1
			//prepare an index block
			for i = 0 to 127 do
			{ b ! i := fs ! fs_firstfree; 
			  fs ! fs_firstfree +:= 1 }
			x := devctl(dc_disc_write, fs ! fs_discnum,
						inodetable ! inode_firstlevelptr, 1, b);
			//todo: whether or when need to release this newvec b? 
			if x <> 1 do
			  out("write fisrtlevelptr failed!!! x = %d", x);
			inodetable ! inode_secondlevelptr := fs ! fs_firstfree;
			fs ! fs_firstfree +:= 1;
			//calculate how many index block pointers needed
			num_second_index_blocks := (nblocks - 9 -128 + 127) / 128;
			for i = 0 to num_second_index_blocks do// fill block ptr in first level 
			{ b1 ! i := fs ! fs_firstfree;		   // second level index block allocated 
			  fs ! fs_firstfree +:= 1 }
			x := devctl(dc_disc_write, fs ! fs_discnum, 
						inodetable ! inode_secondlevelptr, 1, b1);
			if x <> 1 do
			  out("2write secondlevelptr failed!!! x = %d", x); 
			for k = 0 to num_second_index_blocks do
			{ for i = 0 to words_per_block -1 do
			  { b2 ! i := fs ! fs_firstfree;
			    fs ! fs_firstfree +:= 1; }
			  x := devctl(dc_disc_write, fs ! fs_discnum, b1 ! k, 1, b2);
			  fs ! fs_firstfree +:= 1 } }
		  else 
		  { out("out of file system capacity\n");
			break } 
 
		  inodenum := i;	//find the first available inode table entry
		  inode_type of inodetable := inode_file; //0 is file, 1 is dir 
		  inode_status of inodetable := inode_exists;
		  inodetable ! inode_size := length; 
		  inodetable ! inode_nblock := nblocks; 
		  inodetable ! inode_time := 0; //todo: manipulate time functions
/*		  inode_month of inodetable := v ! 1;
		  inode_day of inodetable := v ! 2;
		  inode_hour of inodetable := v ! 4;
		  inode_min of inodetable := v ! 5; */
		  inodetable ! inode_ctime := 0;// 
		  break } 
	    inodetable +:= sizeof_inode }
      entry ! rde_inodenum := inodenum; //3. rde inode number 
	  info ! fi_status := rde_exists;
	  info ! fi_number := inodenum;
	  info ! fi_firstblock := inodetable ! inode_firstblockptrs;
      info ! fi_length := length;
	  resultis info }
    entry +:= sizeof_rde }
  last_error := err_dirfull;
  info ! fi_status := rde_free;
  resultis nil }

let makefile_ui(fs) be
{ let fname = vec rde_namesize/4+2,
	  fi = vec sizeof_fi,
	  length;
  outs("file name? ");
  ins(fname, rde_namesize);
  outs("length (in bytes)? ");
  length := inno();
  fi := makefile(fs, fname, length, fi);
  test fi = nil then
    out("failed: %s\n", last_error)
  else
    out("	entry %d firstblock=%d length=%d\n", fi ! fi_number, 
		fi ! fi_firstblock, fi ! fi_length) }

/* make directory */
let makedir(fs, dirname, info) be
{ let entry = fs ! fs_rootdir,
	  nentries = fs ! fs_rootsize * 128 / sizeof_rde;
  //get inode table
  let inodetable = fs ! fs_inodetable,
      numinodentry = fs ! fs_inodesize * 128 / sizeof_inode,
      inodenum, inodentry;

  for i = 0 to nentries-1 do
  { if rde_status of entry = 0 then
    { zstr_to_nzstr(dirname, entry + rde_name, rde_namesize); //1. rde name
	  // update root directory entry todo:take care of making the directory
	  rde_status of entry := rde_exists;	//2. rde status byte
      for i = 0 to numinodentry-1 do
	  { if inode_status of inodetable = 0 then
        { inodenum := i;	//find the first available inode table entry
		  inode_type of inodetable := inode_dir; //0 is file, 1 is dir 
		  inode_status of inodetable := inode_exists;
		  inodetable ! inode_size := 0;		//number of files in this dir
		  inodetable ! inode_nblock := 11;	//give all 11 ptrs
		  inodetable ! inode_time := 0;		//todo: manipulate time functions
		  inodetable ! inode_ctime := 0; 
		  inodetable ! inode_firstblockptrs := fs ! fs_firstfree;//only initialize the first ptr
		  fs ! fs_firstfree +:= 1;
		  //reading from the block
		  break } 
	    inodetable +:= sizeof_inode }
      entry ! rde_inodenum := inodenum; //3. rde inode number 
	  info ! fi_status := rde_exists;
	  info ! fi_number := inodenum;
	  info ! fi_firstblock := inodetable ! inode_firstblockptrs;
      info ! fi_length := 0;
	  resultis info }
    entry +:= sizeof_rde }
  last_error := err_dirfull;
  info ! fi_status := rde_free;
  resultis nil }

let makedir_ui(fs) be
{ let dirname = vec rde_namesize/4+2,
	  fi = vec sizeof_fi;	//because directory is also a file
  out("directory name? ");
  ins(dirname, rde_namesize);
  fi := makedir(fs, dirname, fi);
  test fi = nil then
	out("failed: %s\n", last_error)
  else
	out("	entry %d dirname=%s\n", fi ! fi_number, dirname) }

/* find the exist file */
let findfile(fs, fname, info) be
{ let entry = fs ! fs_rootdir,
	  nentries = fs ! fs_rootsize * 128 / sizeof_rde,
	  thisname = vec rde_namesize/4+2;

  let inodetable = fs ! fs_inodetable,
      numinodentry = fs ! fs_inodesize * 128 / sizeof_inode,
      inodenum, inodentry;
  for i = 0 to nentries-1 do
  { if rde_status of entry <> rde_free then	//find in rde
    { nzstr_to_zstr(entry + rde_name, thisname, rde_namesize);
	  if fname %streq thisname then			//find the entry in rde
	  { inodenum := entry ! rde_inodenum;
		inodentry := inodetable + inodenum * sizeof_inode; 
		info ! fi_status := rde_status of entry;
		info ! fi_number := inodenum;
		info ! fi_firstblock := inodentry ! inode_firstblockptrs;
		info ! fi_length := inodentry ! inode_size;
	    resultis info } }
    entry +:= sizeof_rde }
  last_error := err_notfound;
  info ! fi_status := rde_free;
  resultis nil }

let findfile_ui(fs) be
{ let wantname = vec rde_namesize/4+2,
	  fi = vec sizeof_fi;
  outs("file name? ");
  ins(wantname, rde_namesize);
  fi := findfile(fs, wantname);
  test fi = nil then
    out("failed: %s\n", last_error)
  else
    out("   inodenum=%d firstblock=%d length=%d\n",
        fi ! fi_number, fi ! fi_firstblock, fi ! fi_length) }

/* open an existing file */
let open(fs, fname, mode) be
{ let info = vec sizeof_fi,
	  f;
  if mode <> 'r' /\ mode <> 'w' then
  { last_error := err_wrongmode;
	resultis nil }
  info := findfile(fs, fname, info);
  if info = nil then resultis nil;
  f := newvec(sizeof_file); //create a struct for in-mem file info
  f ! file_mode := mode;
  f ! file_filesys := fs;
  f ! file_thisblockn := info ! fi_firstblock;
  f ! file_remaining := info ! fi_length;
  f ! file_position := mode = 'w' -> 0, 512;
  f ! file_buffer := f + file_buffer + 1; //file_buffer keep the buf address
  resultis f }

/* flush the file content */
let file_flush(f) be
{ if f ! file_mode <> 'w' then return;
  if f ! file_position = 0 then return;
  devctl(dc_disc_write, f ! file_filesys ! fs_discnum,
		 f ! file_thisblockn, 1, f ! file_buffer) }

/* close the file */
let close(f) be
{ file_flush(f);
  f ! file_mode := 0;
  freevec(f) }

/* read the already exist file */
let read(f, ptr, num) be
{ let pos = f ! file_position,
	  buf = f ! file_buffer;
  if f ! file_mode <> 'r' then
  { last_error := err_wrongmode;
	resultis -1 }
  if num > f ! file_remaining then
	num := f ! file_remaining;
  for i = 0 to num-1 do
  { if pos = 512 then
	{ let bn = f ! file_thisblockn;//todo: deal with bn > 8
	  devctl(dc_disc_read, f ! file_filesys ! fs_discnum, bn, 1, buf);
	  f ! file_thisblockn := bn + 1;
	  pos := 0 }
	byte i of ptr := byte pos of buf;
	pos +:= 1 }
  f ! file_position := pos;
  f ! file_remaining -:= num;
  resultis num }

/* write the already exist file */
let write(f, ptr, num) be
{ let pos = f ! file_position,
      buf = f ! file_buffer;
  if f ! file_mode <> 'w' then
  { last_error := err_wrongmode;
	resultis -1 }
  if num > f ! file_remaining then
	num := f ! file_remaining; //ensure the num = size when created
  for i = 0 to num-1 do
  { byte pos of buf := byte i of ptr;
	pos +:= 1;
	if pos = 512 then
	{ let bn = f ! file_thisblockn;//todo: deal with bn > 8
	  devctl(dc_disc_write, f ! file_filesys ! fs_discnum, bn, 1, buf);
	  f ! file_thisblockn := bn + 1;
	  pos := 0 } }
  f ! file_position := pos;
  f ! file_remaining -:= num;
  resultis num }

/* write alphabetic chars to a file */
let writealph_ui(fs) be
{ let filename = vec rde_namesize/4+2,
	  fout, len, al = "abcdefghigklmnopqrstuvwxyz";
  outs("file name? ");
  ins(filename, rde_namesize);
  fout := open(fs, filename, 'w');
  if fout = nil then
  { out("failed: %s\n", last_error);
	return }
  len := fout ! file_remaining;
  out("%d bytes to fill\n", len);
  while len >= 26 do
  { write(fout, al, 26);
    len -:= 26 }
  if len > 0 then
    write(fout, al, len);
  close(fout) }

/* show the file contents */
let showfile_ui(fs) be
{ let filename = vec rde_namesize/4+2,
	  buffer = vec 26,
	  fin, amt;
  outs("file name? ");
  ins(filename, rde_namesize);
  fin := open(fs, filename, 'r');
  if fin = nil then
  { out("failed: %s\n", last_error);
	return }
  while true do
  { let amt = read(fin, buffer, 100);
	if amt <= 0 then break;
	byte amt of buffer := 0;
	out("%s", buffer) }
  out("\n"); 
  close(fin) }

/* change current directory */
let chdir(fs, dirname, info) be
{ let entry = fs ! fs_rootdir,
	  nentries = fs ! fs_rootsize * 128 / sizeof_rde,
	  thisname = vec rde_namesize/4+2;

  //get inode table
  let inodetable = fs ! fs_inodetable,
      numinodentry = fs ! fs_inodesize * 128 / sizeof_inode,
      inodenum, inodentry;
  let b, x;
  for i = 0 to nentries-1 do
  { if rde_status of entry <> rde_free then	//find in rde
    { nzstr_to_zstr(entry + rde_name, thisname, rde_namesize);
	  if dirname %streq thisname then			//find the entry in rde
	  { inodenum := entry ! rde_inodenum;
		inodentry := inodetable + inodenum * sizeof_inode; 
		info ! fi_status := rde_status of entry;
		info ! fi_number := inodenum;
		info ! fi_firstblock := inodentry ! inode_firstblockptrs;
		info ! fi_length := inodentry ! inode_size;
		// read the directory block into mem
		b := newvec(words_per_block);
		x := devctl(dc_disc_read, fs ! fs_discnum, 
					inodentry ! inode_firstblockptrs, 1, b); 	
		fs ! fs_rootdir := b;
	    resultis info } }
    entry +:= sizeof_rde }
  last_error := err_notfound;
  info ! fi_status := rde_free;
  resultis nil }

let chdir_ui(fs) be
{ let dirname = vec de_namesize/4+2,
	  fi = vec sizeof_fi;	//because directory is also a file
  out("which directory? ");
  ins(dirname, de_namesize);
  fi := chdir(fs, dirname, fi);
  test fi = nil then
	out("failed: %s\n", last_error)
  else
	out("	change to new dir=%s\n", dirname) }

/* delete a file */
let deletefile_ui() be
{

}

/*write N bytes to a file*/
let write_n_bytes() be
{

}

/*read N bytes from a file */
let read_n_bytes() be 
{

}

/*set file position(next read from this position)*/
let set_file_pos() be
{

}

/* usage instructions*/
let show_usage() be
{ outs("\n\n Hello, this is a sensible file system which support");
  outs(" directories and direct access of the disk, and many more...");
  outs("Following is the operations it now support: \n");
  outs("\t'0' Initialize the disc\n");
}

/*start function*/
let start() be
{ manifest { heapsize = 10240 }
  let heap = vec heapsize,
      cmd = vec 20,
      fs = vec sizeof_fs;
  init(heap, heapsize);
  fs ! fs_discnum := 0;

  while fs ! fs_discnum = 0 do
  { outs("< ");
    ins(cmd, 20);
    test cmd %streq "format" then
      format(fs)
    else test cmd %streq "load" then
      load(fs)
    else test cmd %streq "exit" then
      break
    else
      out("unrecognised command '%s'\nsay format, load, or exit\n", cmd) }

  while true do
  { outs("< ");
    ins(cmd, 20);
    test cmd %streq "dir" then
      listroot(fs)
    else test cmd %streq "make" then
      makefile_ui(fs)
    else test cmd %streq "find" then
      findfile_ui(fs)
	else test cmd %streq "alpha" then
	  writealph_ui(fs)
	else test cmd %streq "show" then
	  showfile_ui(fs)
	else test cmd %streq "mkdir" then
	  makedir_ui(fs)
    else test cmd %streq "chdir" then
	  chdir_ui(fs)
    else test cmd %streq "delete" then
      deletefile_ui(fs)
    else test cmd %streq "exit" then
      break
    else
      out("unrecognised command '%s'\nsay dir, make, find, delete, alpha, show, mkdir, chdir or exit\n", cmd) }

  write_rootdir(fs);
  write_inodetable(fs);
  write_superblock(fs) }
